<!-- page "/search"-->
@using Microsoft.AspNetCore.WebUtilities
@using WebProject.Shared
@inject IJSRuntime JSRuntime
@inject IShipSearchService SearchService
@inject NavigationManager Navigation

<Warning AlertMessage="@AlertMessage" ShowAlert="@ShowAlert" />

<div class="container">
    <div class="search-container input-group row">
        <EditForm Model="@model" OnSubmit="@Search">
                <input type="date" @bind-value="from" class="form-control date-from" placeholder="From" style="width: auto; display: initial">
                <input type="date" @bind-value="until" class="form-control date-to" placeholder="Until" style="width: auto; display: initial">
                <input type="number" @bind-value="maxPersons" class="form-control persons" placeholder="Number of persons" style="width: auto; display: initial">
                <input type="text" @bind-value="port" class="form-control search" placeholder="Port" style="width: auto; display: initial">
                <button type="submit" class="search-btn">Search</button>
        </EditForm>
    </div>
</div>
<br>

@code {
    [Parameter]
    public ApplicationUserDTO PersonLoggedOn { get; set; }

    [Parameter]
    public EventCallback<List<ShipDTO>> QueryReady { get; set; }

    private DateTime? from { get; set; } = default;
    private DateTime? until { get; set; } = default;
    private int? maxPersons { get; set; } = default;
    private string port { get; set; } = default;

    private object model = new object();

    public List<ShipDTO> QueryResult { get; set; } = new();

    private bool ShowAlert { get; set; } = false;
    private string AlertMessage { get; set; } = "Error";

    private void SetFieldsToDefault()
    {
        from = default;
        until = default;
        maxPersons = default;
        port = default;

        StateHasChanged();
    }

    private void SendAlert(string message)
    {
        AlertMessage = message;
        ShowAlert = true;
        StateHasChanged();
    }

    async void Search()
    {
        try
        {
            QueryResult = await SearchService.SearchShips(from, until, maxPersons, port);

            //callback to parent page
            await QueryReady.InvokeAsync(QueryResult);
        }
        catch (InvalidOperationException e)
        {
            SendAlert(e.Message + "  -  Try again");
            SetFieldsToDefault();
        }
        StateHasChanged();
    }
}