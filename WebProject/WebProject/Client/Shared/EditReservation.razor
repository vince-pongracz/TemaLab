@inject IJSRuntime JSRuntime
@inject IReservationService ReservationService


<div class="card reservation-card">
    <div class="card-body">
        <h5 class="card-title">Book a ship</h5>
        <h6 class="card-subtitle mb-2 text-muted">Enter the dates for the reservation here:</h6>
        <EditForm Model="@reservation" OnSubmit="@HandleSubmit">
            <div class="form-group">
                <label>Book from:</label>
                <InputDate @bind-Value="reservation.FromDate" class="form-control"></InputDate>
            </div>
            <div class="form-group">
                <label>Book until</label>
                <InputDate @bind-Value="reservation.ToDate" class="form-control"></InputDate>
            </div>
            <div class="form-group">
                @if (CalculatePrice() < 0)
                {
                    <label>Total price: Invalid Date Interval</label>
                }
                else
                {
                    <label>Total price: @CalculatePrice()</label>
                }
            </div>
            <button type="submit" class="btn btn-teal">Book this ship </button>
        </EditForm>
    </div>
</div>


@code {
    [Parameter]
    public ApplicationUserDTO PersonLoggedOn { get; set; }

    [Parameter]
    public ShipDTO SelectedShip { get; set; }

    private ReservationPostDTO reservation = new ReservationPostDTO
    {
        FromDate = DateTime.Today,
        ToDate = DateTime.Today.AddDays(1),
        //TODO get and set the current Ship and Person here
    };


    async void HandleSubmit()
    {
        await JSRuntime.InvokeVoidAsync("console.log", reservation);

        if (CalculatePrice() > 0)
            await ReservationService.CreateReservation(reservation);
    }

    decimal CalculatePrice()
    {
        decimal result = numOfWeekdays() * SelectedShip.PriceAtWeekDays;
        result += numOfWeekendDays() * SelectedShip.PriceAtWeekEnds;
        Console.WriteLine(SelectedShip.Name);
        return result;
    }

    int numOfWeekdays()
    {
        int totalDays = 0;
        for (DateTime date = reservation.FromDate; date < reservation.ToDate; date = date.AddDays(1))
        {
            if (date.DayOfWeek != DayOfWeek.Saturday
                && date.DayOfWeek != DayOfWeek.Sunday)
                totalDays++;
        }
        Console.WriteLine(totalDays);
        return totalDays;


    }

    int numOfWeekendDays()
    {
        TimeSpan timeSpan = reservation.ToDate - reservation.FromDate;
        return timeSpan.Days - numOfWeekdays();
    }
}
