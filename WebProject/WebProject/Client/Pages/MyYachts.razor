@page "/myYachts"
@using WebProject.Client.Services.ShipImageService
@using Microsoft.AspNetCore.Authorization
@using BlazorPro.Spinkit
@attribute [Authorize]
@inject IShipSearchService ShipSearchService
@inject IShipImageService ShipImageService


<h3>My Yachts</h3>
<br>

@if (OwnedShips == null)
{
    <SpinLoader IsLoading="true">
        <LoadingTemplate>
            <div>
                <br />
                <br />
                <Chase Center="true" Color="blue" Size="40px"></Chase>
            </div>
        </LoadingTemplate>
    </SpinLoader>
}
else if (OwnedShips.Count == 0)
{
    <span>You do not lease out any ships yet.</span>
}
else
{
    foreach (var item in OwnedShips)
    {
        <div class="card own-card-style ">
            <h5 class="card-header">@item.Name</h5>
            <img class="ship-img" src="@GetImgRoute(item.Id)" alt="Image of the ship">
            <div class="card-body table-responsive">
                <table class="card-table">
                    <tr>
                        <td>Port: </td>
                        <td>@item.HomePort</td>
                        <td>Ranking: </td>
                        <td> ...</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>Capacity: </td>
                        <td>Max @item.MaxPeople people</td>
                        <td>Ship type: </td>
                        <td>@item.ShipType</td>
                        <td>Set the availability of the ship<br>(Checked - available)</td>
                    </tr>
                    <tr>
                        <td>Price at Weekends: </td>
                        <td>@item.PriceAtWeekEnds</td>
                        <td>Price at Weekdays: </td>
                        <td>@item.PriceAtWeekDays</td>
                        <td>
                            <div class="form-check form-switch">
                                @if (item.IsAvailable)
                                {
                                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" checked @bind-value="@item.IsAvailable" @oninput="EventArgs => { UpdateAvailability(item.Id, false); }">
                                }
                                else
                                {
                                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" @bind-value="@item.IsAvailable" @oninput="EventArgs => { UpdateAvailability(item.Id, true); }">
                                }
                            </div>
                        </td>
                    </tr>
                </table>
                <table>
                    <!--just for styling-->
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                </table>
            </div>
        </div>
        <br>
    }
}

@code {

    public List<ShipDTO> OwnedShips = null;
    private List<ShipImageDTO> Images { get; set; } = new List<ShipImageDTO>();

    protected override async Task OnInitializedAsync()
    {
        OwnedShips = await ShipSearchService.GetOwnedShipsForUser();
        Images = await ShipImageService.GetAllImages();
    }

    public async void UpdateAvailability(int id, bool checkedValue)
    {
        ShipDTO shipToEdit = await ShipSearchService.GetShip(id);
        shipToEdit.IsAvailable = checkedValue;
        await ShipSearchService.UpdateShipAvailability(shipToEdit, id);
        StateHasChanged();
    }

    private string GetImgRoute(int id)
    {
        ShipImageDTO img = Images.Find(x => x.ShipId == id);
        if (img == null)
            return "Images/img_not_found.png";
        else
            return img.RouteToPic;
    }

}
