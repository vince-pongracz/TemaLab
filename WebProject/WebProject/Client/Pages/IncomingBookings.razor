@page "/incomingBookings"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WebProject.Shared
@using BlazorStrap
@using BlazorPro.Spinkit
@attribute [Authorize]
@inject IReservationService ReservationService
@inject IShipSearchService ShipSearchService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
@implements IDisposable

<div class="title">
    <h3>Incoming Bookings</h3>
</div>
<br />

@if (bookings == null)
{
    <SpinLoader IsLoading="true">
        <LoadingTemplate>
            <div>
                <br />
                <br />
                <Chase Center="true" Color="blue" Size="40px"></Chase>
            </div>
        </LoadingTemplate>
    </SpinLoader>
}
else if (bookings.Count == 0)
{
    <span>It seems like you haven't got any incoming bookings for now...</span>
}
else
{
    <div class="reservation-table table-responsive-lg">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Nr.</th>
                    <th>Ship Name</th>
                    <th>Port</th>
                    <th>From</th>
                    <th>To</th>
                    <th>Price</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in bookings)
                {
                    if (item != null)
                    {
                        <tr>
                            <td>@item.Id</td>
                            <td><a href="/ships/@item.ShipId">@GetShip(item.ShipId).Name</a></td>
                            <td>@GetShip(item.ShipId).HomePort</td>
                            <td>@item.FromDate.ToShortDateString()</td>
                            <td>@item.ToDate.ToShortDateString()</td>
                            <td>@item.Price</td>
                            <td>
                                <div>
                                    @if (!IsDesibled(item.FromDate))
                                    {
                                        <ModalDialog ItemId="item.Id"
                                                     ActionOnOk="() => {
                                                             onCancelPushed(item.Id);
                                                         }"
                                                     Disabled=@IsDesibled(@item.FromDate)
                                                     ButtonText="Dismiss"
                                                     QuestionText="Are you sure, you want to delete this incoming booking?" />
                                        @if (!item.ReservationApproved)
                                        {
                                            <ModalDialog ItemId="item.Id"
                                                         ActionOnOk="() => {
                                                             onApprovePushed(item.Id);
                                                         }"
                                                         Disabled=@IsDesibled(@item.FromDate)
                                                         ButtonText="Approve"
                                                         QuestionText="Are you sure, you want to approve this incoming booking?"
                                                         PictoDesign="oi oi-check" />
                                        }
                                        else
                                        {
                                            <p> Approved!</p>
                                        }
                                    }
                                    else
                                    {
                                        <p> Time is out!</p>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@code {

    private List<ReservationGetDTO> bookings { get; set; }

    async void onCancelPushed(int itemId)
    {
        bookings = await ReservationService.DeleteReservation(itemId);
        StateHasChanged();
    }
    async void onApprovePushed(int itemId)
    {
        bookings = await ReservationService.ApproveReservation(itemId);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        bookings = await ReservationService.GetIncomingBookings();
        await ShipSearchService.GetShips();
        ReservationService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ReservationService.OnChange -= StateHasChanged;
    }

    public ShipDTO GetShip(int shipId)
    {
        return ShipSearchService.Ships.Find(s => s.Id == shipId);
    }

    public bool IsDesibled(DateTime from)
    {
        if (from.AddDays(-2) < DateTime.Now)
            return true;
        else
            return false;
    }
}
